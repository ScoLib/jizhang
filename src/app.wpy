<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import { setStore } from 'wepy-redux'
import configStore from './store'

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index'
    ],
    window: {
      backgroundColor: "#efefef",
      navigationBarBackgroundColor: "#1976D2",
      backgroundTextStyle: "light",
      navigationBarTitleText: "i云记账",
      navigationBarTextStyle: "white",
      enablePullDownRefresh: false
    },
    // tabBar: {
    //   backgroundColor: "#fff",
    //   color: "#999",
    //   selectedColor: "black",
      // list: [
        // {
        //   pagePath: "pages/index",
        //   iconPath: "public/images/settings/statement.png",
        //   selectedIconPath: "public/images/settings/statement-active.png",
        //   text: "账单"
        // },
        // {
        //   pagePath: "pages/chart",
        //   iconPath: "public/images/settings/statistic.png",
        //   selectedIconPath: "public/images/settings/statistic-active.png",
        //   text: "统计"
        // },
        // {
        //   pagePath: "pages/asset",
        //   iconPath: "public/images/settings/asset.png",
        //   selectedIconPath: "public/images/settings/asset-active.png",
        //   text: "资产"
        // },
        // {
        //   pagePath: "pages/my",
        //   iconPath: "public/images/settings/user.png",
        //   selectedIconPath: "public/images/settings/user-active.png",
        //   text: "我的"
        // }
    //   ]
    // },
    networkTimeout: {
      request: 10000,
      downloadFile: 10000
    },
    debug: true,
    plugins: {
      "calendar": {
        "version": "1.1.3",
        "provider": "wx92c68dae5a8bb046"
      }
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  onLaunch() {
    // this.testAsync()
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
